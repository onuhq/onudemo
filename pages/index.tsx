import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css'
import scriptData from '../onuconfig.json'
import axios from 'axios';

interface CommandArg {
  id: string;
  type: string;
  name: string;
  description: string;
  value: string | number;
}
interface Step {
  id: string;
  name: string;
  description: string;
  command: string;
  args: Array<CommandArg>;
}

interface StepOutput {
  stdout: string;
  stderr: string;
}

function joinClassNames(...classes: Array<string | boolean | undefined>) {
  return classes.filter(Boolean).join(' ')
}

const makeId = (length: number) => {
  var result = '';
  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

export default function Home() {

  const [steps, setSteps] = useState<Array<Step>>([]);
  const [scenario, setScenario] = useState<Array<Step>>([]);
  const [stepOutput, setStepOutput] = useState<Array<StepOutput>>([]);

  useEffect(() => {
    // add a base value to each script
    const newScripts: Array<Step> = scriptData.scripts.map(script => {
      return {
        id: makeId(6),
        name: script.name,
        description: script.description,
        command: script.command,
        args: script.args.map(arg => { return { id: makeId(6), type: arg.type, description: arg.description, name: arg.name, value: arg.type === "string" ? "" : 0 } })
      }
    })
    setSteps(newScripts);
  }, [])

  const addToScenario = (step: Step) => {
    // give the step it's own ID
    let scenarioStep = { ...step, id: makeId(6) }
    scenarioStep.args = scenarioStep.args.map(ss => { return { ...ss, id: makeId(6) } })
    setScenario(scenario.concat([scenarioStep]));
  }

  const removeAtId = (stepId: string) => {
    // Removes the step with the given id
    const newArray = scenario.filter(element => element.id !== stepId)
    setScenario(newArray);
  }

  const updateScenarioStepValue = (stepId: string, argId: string, value: string | number) => {
    const newArray = scenario.map((scenarioStep, i) => {
      if (scenarioStep.id !== stepId) {
        return scenarioStep;
      }
      const updatedStep = Object.assign({}, scenarioStep)
      for (let sArg of updatedStep.args) {
        if (sArg.id === argId) {
          sArg.value = value
        }
      }
      return updatedStep;
    })
    setScenario(newArray)

  }

  const runScenario = async () => {
    // clear step output if there is any
    setStepOutput([]);
    let output: Array<StepOutput> = []
    // runs each step in the scenario
    for (let scenarioStep of scenario) {
      const data = {
        command: scenarioStep.command,
        args: scenarioStep.args.map(arg => { return { type: arg.type, value: arg.value } })
      }
      const response = await axios.post('http://localhost:8000/execute', data);
      output = output.concat([response.data.output])
    }

    setStepOutput(output)

  }

  const clearScenario = () => {
    // clear current output
    setStepOutput([]);

    // clear the values
    let output: Array<Step> = [];

    for (let scenarioStep of scenario) {
      let data = Object.assign({}, scenarioStep)
      data.args = data.args.map(arg => { return { type: arg.type, value: "", id: arg.id, description: arg.description, name: arg.name } })

      output = output.concat([data])
    }

    setScenario(output)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className='flex flex-row justify-start w-full h-full'>
          <div className='border-2 flex flex-col border-transparent border-r-black pr-12'>
            <p className='text-xl font-medium self-center'>Steps</p>
            {steps.map((step, i) => {
              return (
                <div key={step.id}>
                  <div className='bg-gray-200 w-80 px-5 py-5 rounded-t-lg'>
                    <p className='font-bold text-lg mb-1'>{step.name}</p>
                    <p className='italic mb-2 text-sm text-gray-600'>{step.description}</p>
                    <p className="text-gray-600 font-bold mb-1">Script</p>
                    <p className='font-mono mb-4 bg-white text-sm rounded-md px-3 py-1 text-indigo-500 font-semibold'>{step.command}</p>
                    <p className="text-gray-600 font-bold mb-1">Inputs</p>
                    <div>
                      {step.args.map((arg, i) => (
                        <p className='font-bold text-gray-600 text-sm mb-1' key={`${arg.id}-${i}`}>{arg.name}: <span className='capitalize font-normal'>{arg.type}</span></p>
                      ))}
                    </div>

                  </div>
                  <div onClick={() => addToScenario(step)} className='px-3 py-2 bg-indigo-300 rounded-b-lg mb-6 flex justify-center text-white font-semibold cursor-default'>
                    Add
                  </div>
                </div>
              )
            })}
          </div>
          <div className='flex flex-col '>
            <div className='flex flex-col  justify-center items-center'>
              <p className='text-xl font-medium'>
                Scenario
              </p>

            </div>
            <div className='flex justify-end mb-6'>
              <button onClick={clearScenario} className='px-5 py-2 bg-white border border-gray-400 rounded-lg text-gray-500 font-bold'>
                Reset
              </button>
              <button onClick={runScenario} className='ml-5 px-5 py-2 bg-green-500 rounded-lg text-white font-bold'>
                Run
              </button>
            </div>



            <div>
              {scenario.map((scenarioStep, i) => {
                return (
                  <div className='w-full mb-6' key={`scenariostep${scenarioStep.id}`}>
                    <div className='bg-gray-200 px-5 py-3 mb-3 rounded-lg'>
                      <p className='font-bold mb-2 text-lg'>{scenarioStep.name}</p>
                      <div className='flex flex-col pt-5'>
                        {scenarioStep.args?.map((arg, j) => {
                          return (
                            <div key={`step${scenarioStep.id}arg${arg.id}`} className='mb-5'>
                              <p className='font-bold text-sm text-gray-500'>{`${arg.name} (${arg.type})`}</p>
                              <p className='text-sm italic text-gray-500'>{arg.description}</p>
                              <input className='rounded-md px-2 py-1 border border-gray-300' type={"text"} value={arg.value} onChange={(e) => updateScenarioStepValue(scenarioStep.id, arg.id, e.target.value)} />
                            </div>
                          )
                        })}
                      </div>
                      <button onClick={() => removeAtId(scenarioStep.id)} className='px-3 py-2 bg-red-300 rounded-lg'>
                        remove
                      </button>


                    </div>
                    <div>
                      {/* Step output goes here */}
                      {stepOutput[i] && (
                        <div className={joinClassNames(stepOutput[i].stderr ? 'bg-red-200' : 'bg-green-200', 'px-3 py-3 flex flex-col rounded-lg')}>
                          <p className={joinClassNames(stepOutput[i].stderr ? 'text-red-800' : 'text-green-800', 'text-sm')}>Output:</p>
                          <pre className='font-mono text-xs text-gray-800'>{stepOutput[i].stdout ? stepOutput[i].stdout : stepOutput[i].stderr}</pre>
                        </div>
                      )}
                    </div>
                  </div>
                )
              })}
            </div>
          </div>

        </div>



      </main >

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div >
  )
}
