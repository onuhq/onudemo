import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css'
import scriptData from '../onuconfig.json'
import axios from 'axios';

interface CommandArg {
  type: string;
  name: string;
  description: string;
  value: string | number;
}
interface Step {
  name: string;
  description: string;
  command: string;
  args: Array<CommandArg>;
}


export default function Home() {

  const [steps, setSteps] = useState<Array<Step>>([]);
  const [scenario, setScenario] = useState<Array<Step>>([]);

  useEffect(() => {
    // add a base value to each script
    const newScripts: Array<Step> = scriptData.scripts.map(script => {
      return {
        name: script.name,
        description: script.description,
        command: script.command,
        args: script.args.map(arg => { return { type: arg.type, description: arg.description, name: arg.name, value: arg.type === "string" ? "" : 0 } })
      }
    })
    setSteps(newScripts);
  }, [])

  const addToScenario = (step: Step) => {
    setScenario(scenario.concat([step]))
  }

  const removeAtIndex = (indexForRemoval: number) => {
    // Removes the step at the given index
    const newArray = scenario.slice(0, indexForRemoval).concat(scenario.slice(indexForRemoval + 1))
    setScenario(newArray);
  }

  const updateScenarioStepValue = (stepIndex: number, argIndex: number, value: string | number) => {
    const newArray = scenario.map((scenarioStep, i) => {
      if (i !== stepIndex) {
        return scenarioStep;
      }
      const updatedStep = Object.assign({}, scenarioStep)
      updatedStep.args[argIndex].value = value;
      return updatedStep;
    })
    setScenario(newArray)

  }

  const runScenario = async () => {
    // runs each step in the scenario
    for (let scenarioStep of scenario) {
      const data = {
        command: scenarioStep.command,
        args: scenarioStep.args.map(arg => { return { type: arg.type, value: arg.value } })
      }
      const response = await axios.post('http://localhost:8000/execute', data)
      console.log('response', response)
    }

  }



  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className='flex flex-row justify-start w-full h-full'>
          <div className='border-2 border-transparent border-r-black pr-12'>
            <p>Steps</p>
            {steps.map((step, i) => {
              return (
                <div key={`step${i}`} className='bg-gray-100 drop-shadow-lg px-5 py-3 mb-6'>
                  <p className='font-bold mb-2'>{step.name}</p>
                  <p className='italic mb-2'>{step.description}</p>
                  <p className='font-mono mb-4 bg-gray-200 rounded-md px-3 py-1 text-blue-600'>{step.command}</p>
                  <button onClick={() => addToScenario(step)} className='px-3 py-2 bg-blue-300 rounded-lg'>
                    Add
                  </button>
                </div>
              )
            })}
          </div>
          <div>
            <p>
              scenario
            </p>
            <button onClick={runScenario} className='ml-10 px-3 bg-gray-300 rounded-full'>
              Run
            </button>
            <div>
              {scenario.map((scenarioStep, i) => {
                return (
                  <div key={`step${i}`} className='bg-gray-100 drop-shadow-lg px-5 py-3 mb-6'>
                    <p className='font-bold mb-2'>{scenarioStep.name}</p>
                    <p className='italic mb-2'>{scenarioStep.description}</p>
                    <div className='flex flex-col pt-5'>
                      {scenarioStep.args?.map((arg, j) => {
                        return (
                          <div key={`step${i}arg${j}`} className='mb-5'>
                            <p className='font-bold text-sm'>{`${arg.name} (${arg.type})`}</p>
                            <p className='text-sm'>{arg.description}</p>
                            <input value={arg.value} onChange={(e) => updateScenarioStepValue(i, j, e.target.value)} key={`step${i}arg${j}`} />
                          </div>
                        )
                      })}
                    </div>
                    <button onClick={() => removeAtIndex(i)} className='px-3 py-2 bg-red-300 rounded-lg'>
                      remove
                    </button>
                  </div>
                )
              })}
            </div>
          </div>

        </div>



      </main >

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div >
  )
}
